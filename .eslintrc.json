{
  "root": true,
  "env": {
    "browser": true,
    "node": true
  },
  "parser": "vue-eslint-parser",
  "parserOptions": {
    "parser": "@typescript-eslint/parser"
  },
  "extends": [
    "eslint:recommended",
    "@nuxt",
    "plugin:@typescript-eslint/recommended",
    "plugin:vue/vue3-recommended",
    "@unocss",
    "plugin:prettier/recommended",
    "prettier",
    "plugin:import/recommended",
    "plugin:import/typescript"
  ],
  "plugins": ["@typescript-eslint", "nuxt", "import", "unused-imports"],
  "rules": {
    // Interferes with unused-import
    "@typescript-eslint/no-unused-vars": "off",
    "no-console": "off",
    "vue/multi-word-component-names": "off",
    "sort-imports": [
      "error",
      {
        "ignoreCase": false,
        "ignoreDeclarationSort": true,
        // don"t want to sort import lines, use eslint-plugin-import instead
        "ignoreMemberSort": false,
        "memberSyntaxSortOrder": ["none", "all", "multiple", "single"],
        "allowSeparatedGroups": true
      }
    ],
    // turn on errors for missing imports
    // This behaves weirdly with the json-schema module
    "import/no-unresolved": "off",
    // 'import/no-named-as-default-member': 'off',
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          // Built-in imports (come from NodeJS native) go first
          "external",
          // <- External imports
          "internal",
          // <- Absolute imports
          ["sibling", "parent"],
          // <- Relative imports, the sibling and parent types they can be mingled together
          "index",
          // <- index imports
          "unknown"
          // <- unknown
        ],
        "newlines-between": "always",
        "alphabetize": {
          /* sort in ascending order. Options: ["ignore", "asc", "desc"] */
          "order": "asc",
          /* ignore case. Options: [true, false] */
          "caseInsensitive": true
        }
      }
    ],
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ]
  }
}
